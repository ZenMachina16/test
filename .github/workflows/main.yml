```yaml
name: CI/CD Pipeline for JavaScript Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-npm-

      - name: Install dependencies with retry
        uses: nick-invision/retry@v3
        with:
          timeout_seconds: 300
          max_attempts: 3
          retry_on: error
          command: npm ci --prefer-offline --no-audit

      - name: Run tests (if script exists)
        id: test
        if: success() && fromJSON(file('package.json')).scripts.test
        run: npm test
        continue-on-error: false

      - name: Run build (if script exists)
        id: build
        if: success() && fromJSON(file('package.json')).scripts.build
        run: npm run build
      
      - name: Upload build artifact
        if: success() && fromJSON(file('package.json')).scripts.build
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.node-version }}
          path: |
            dist/
            build/
          if-no-files-found: ignore
          retention-days: 7

  security_scan:
    name: Security Scanning
    needs: build
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript'

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

  deploy:
    name: Deploy to Production
    needs: [build, security_scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://app.test.com

    steps:
      - name: Create GitHub Deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'production',
              required_contexts: [],
              auto_merge: false,
              description: 'Deploying to production'
            });
            core.setOutput('deployment_id', deployment.id);

      - name: Download build artifact (Node 20.x)
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-20.x
          path: ./deployment-package
      
      - name: Deploy to production environment
        id: deploy_step
        run: |
          echo "Simulating deployment of contents in ./deployment-package"
          # Replace this with your actual deployment command
          # e.g., aws s3 sync ./deployment-package s3://my-bucket
          sleep 10
          echo "Deployment simulation successful"

      - name: Update Deployment Status (Success)
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.deployment_id }},
              state: 'success',
              environment_url: 'https://app.test.com',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

      - name: Update Deployment Status (Failure)
        if: failure() || cancelled()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.deployment_id }},
              state: 'failure',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

  rollback:
    name: Rollback Production Deployment
    if: always() && needs.deploy.result == 'failure'
    needs: deploy
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Notify of Rollback
        run: echo "Deployment failed. Initiating rollback procedure."

      - name: Create GitHub Deployment for Rollback
        id: rollback_deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'production',
              required_contexts: [],
              description: 'Rolling back failed production deployment'
            });
            core.setOutput('deployment_id', deployment.id);
            
      - name: Execute Rollback
        run: |
          echo "Simulating rollback to the previous stable version."
          # Add your rollback script here.
          # e.g., aws s3 sync s3://my-bucket-backup s3://my-bucket
          # or kubectl rollout undo deployment/my-app
          sleep 5
          echo "Rollback successful."

      - name: Update Rollback Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.rollback_deployment.outputs.deployment_id }},
              state: 'success',
              description: 'Rollback completed successfully.'
            });

```