```yaml
name: CI/CD Pipeline for JavaScript Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      rollback_run_id:
        description: 'ID of the successful workflow run to rollback to. (Find on the Actions tab)'
        required: true
        type: string

jobs:
  build_and_test:
    name: Build, Test & Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies with retry
        uses: nick-invision/retry@v3
        with:
          timeout_seconds: 120
          max_attempts: 3
          command: npm ci

      - name: Security Audit (npm)
        run: npm audit --audit-level=high

      - name: Initialize CodeQL for Security Scanning
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript'

      - name: Check for available npm scripts
        id: check_scripts
        run: |
          if jq -e '.scripts.test' package.json > /dev/null; then echo "test_script_exists=true" >> $GITHUB_OUTPUT; fi
          if jq -e '.scripts.build' package.json > /dev/null; then echo "build_script_exists=true" >> $GITHUB_OUTPUT; fi

      - name: Run tests
        if: steps.check_scripts.outputs.test_script_exists == 'true'
        run: npm test

      - name: Run build
        if: steps.check_scripts.outputs.build_script_exists == 'true'
        run: npm run build --if-present

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Upload build artifact
        if: steps.check_scripts.outputs.build_script_exists == 'true' && matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ github.sha }}
          path: |
            dist/
            build/
            public/
          if-no-files-found: ignore
          retention-days: 7

  deploy:
    name: Deploy to Production
    needs: build_and_test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://app.test.com # Replace with your deployment URL

    steps:
      - name: Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'production',
              required_contexts: [],
              auto_merge: false,
              description: 'Deploying to production'
            });
            core.setOutput('deployment_id', deployment.id);
            core.setOutput('deployment_url', deployment.url);

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-${{ github.sha }}
          path: ./deployment

      - name: Deploy to Production with retry
        uses: nick-invision/retry@v3
        with:
          timeout_seconds: 600
          max_attempts: 3
          command: |
            echo "Deploying files from ./deployment to production..."
            # Replace this with your actual deployment command
            # Example: aws s3 sync ./deployment s3://your-s3-bucket --delete
            sleep 10 # Simulating deployment work
            echo "Deployment script finished."

      - name: Update GitHub Deployment Status
        uses: actions/github-script@v7
        if: always() # Run this step even if the deployment fails
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.deployment_id }},
              state: '${{ job.status }}',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              environment_url: 'https://app.test.com'
            });

  rollback:
    name: Rollback Production Deployment
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Download artifact from specified successful run
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: ${{ github.workflow }}
          run_id: ${{ github.event.inputs.rollback_run_id }}
          name: build-artifact-.* # Regex to match the artifact name
          path: ./rollback-deployment
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Perform Rollback
        run: |
          echo "Starting rollback using artifacts from run ${{ github.event.inputs.rollback_run_id }}"
          # Replace with your actual rollback command, using files from ./rollback-deployment
          # Example: aws s3 sync ./rollback-deployment s3://your-s3-bucket --delete
          echo "Rollback deployment complete."

      - name: Create issue on rollback
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Production Rollback Triggered`,
              body: `A production rollback was manually triggered by @${{ github.actor }}. \n\nThe deployment was rolled back to the artifact generated by workflow run [${{ github.event.inputs.rollback_run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.event.inputs.rollback_run_id }}).`
            });
```