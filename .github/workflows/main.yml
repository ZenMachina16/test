```yaml
# Robust CI/CD Pipeline for JavaScript Applications
# Generated by a DevOps Expert

name: CI/CD Pipeline for JavaScript Application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  deployments: write
  pull-requests: write

jobs:
  build_and_test:
    name: Build and Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node.js modules
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies with retry
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: |
          for i in 1 2 3; do
            npm ci && break
            echo "npm ci failed. Retrying in 15 seconds..."
            sleep 15
          done

      - name: Run tests if available
        run: npm test --if-present

      - name: Build application if available
        run: npm run build --if-present

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-node-${{ matrix.node-version }}
          path: |
            dist/
            build/
          if-no-files-found: ignore

  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build_and_test
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies for audit
        run: npm ci

      - name: Run NPM Audit
        run: npm audit --audit-level=high

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript,typescript'
          queries: +security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build_and_test, security_scan]
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://app.test.com # Replace with your production URL

    steps:
      - name: Create GitHub Deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'production',
              required_contexts: [],
              auto_merge: false,
              description: 'Deploying to production'
            });
            core.setOutput('deployment_id', deployment.id);
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'in_progress',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              environment_url: 'https://app.test.com'
            });

      - name: Download production-ready artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-node-20.x # Standardize on the latest LTS for deployment
          path: ./deployment-package

      - name: Deploy to Production with retry
        uses: nick-invision/retry@v3
        with:
          timeout_seconds: 120
          max_attempts: 3
          command: |
            echo "Deploying files from ./deployment-package"
            # Replace with your actual deployment command
            # Example: scp -r ./deployment-package/* user@your-server:/var/www/html
            # Example: aws s3 sync ./deployment-package s3://your-bucket
            echo "Deployment script placeholder"
            # This script must exit 0 on success
            exit 0

      - name: Update Deployment Status (Success)
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.deployment_id }},
              state: 'success',
              environment_url: 'https://app.test.com'
            });

      - name: Update Deployment Status (Failure)
        if: failure() || cancelled()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.deployment_id }},
              state: 'failure'
            });

  rollback:
    name: Automatic Rollback
    runs-on: ubuntu-latest
    needs: deploy
    if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Notify team of rollback
        run: echo "Deployment failed! Initiating rollback procedures."

      - name: Execute Rollback
        run: |
          echo "This is a placeholder for your rollback logic."
          # Example:
          # 1. Get the commit SHA of the last successful deployment from a tag or external system.
          # 2. Checkout that commit.
          # 3. Download the artifact associated with that commit's successful workflow run.
          # 4. Run the deployment script with the old artifact.
          # For now, we'll just report a failure to indicate manual intervention is needed.
          exit 1
```