```yaml
# .github/workflows/main.yml
name: CI/CD Pipeline for JavaScript Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  id-token: write
  deployments: write
  actions: read

jobs:
  build_and_scan:
    name: Build, Test & Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node.js Modules
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies with Retry
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 120
          max_attempts: 3
          command: npm ci

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript'

      - name: Check for Available Scripts
        id: check_scripts
        run: |
          if jq -e '.scripts.test' package.json > /dev/null; then
            echo "test_exists=true" >> $GITHUB_OUTPUT
          else
            echo "test_exists=false" >> $GITHUB_OUTPUT
          fi
          if jq -e '.scripts.build' package.json > /dev/null; then
            echo "build_exists=true" >> $GITHUB_OUTPUT
          else
            echo "build_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Tests
        if: steps.check_scripts.outputs.test_exists == 'true'
        run: npm test

      - name: Run Build
        if: steps.check_scripts.outputs.build_exists == 'true'
        run: npm run build

      - name: Snyk Security Scan
        if: always() # Run even if previous steps fail
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Upload Build Artifact
        if: steps.check_scripts.outputs.build_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-node-${{ matrix.node-version }}
          path: |
            dist/
            build/
          if-no-files-found: ignore
          retention-days: 7

  deploy:
    name: Deploy to Production
    needs: build_and_scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://your-app-url.com # <-- IMPORTANT: Update this URL

    steps:
      - name: Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'production',
              required_contexts: [],
              transient_environment: true,
              auto_merge: false,
              description: 'Deploying to production environment'
            });
            core.setOutput('deployment_id', deployment.id);
            console.log(`Created deployment with ID: ${deployment.id}`);

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-node-20.x # Assuming 20.x is the primary build for deployment
          path: ./deployment-package

      - name: Deploy to Production Environment
        id: deploy_logic
        run: |
          echo "Starting deployment to production..."
          # Add your actual deployment commands here.
          # Example: aws s3 sync ./deployment-package s3://your-bucket-name --delete
          # On failure, exit with a non-zero code to trigger the failure status step.
          echo "Deployment logic placeholder: success."
          exit 0

      - name: Report Deployment Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.deployment_id }},
              state: 'success',
              environment_url: 'https://your-app-url.com', // <-- IMPORTANT: Update this URL
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: 'Deployment to production succeeded.'
            });

      - name: Report Deployment Failure
        if: failure() || cancelled()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.deployment_id }},
              state: 'failure',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: 'Deployment to production failed. Initiating rollback.'
            });
            core.setFailed('Deployment failed. See the rollback job for details.');

  rollback:
    name: Rollback Production Deployment
    needs: deploy
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'push'
    environment: production

    steps:
      - name: Notify on Rollback
        run: echo "::error::Deployment failed! Starting rollback procedure."

      - name: Trigger Rollback
        run: |
          echo "This step should contain your rollback logic."
          echo "For example, find the previously successful deployment and redeploy its artifact."
          # Example: aws deploy create-deployment --application-name YourApp --deployment-group-name YourGroup --revision '{"revisionType":"S3","s3Location":{"bucket":"your-bucket","key":"previous-artifact.zip","bundleType":"zip"}}'
          echo "Rollback logic placeholder complete."
```