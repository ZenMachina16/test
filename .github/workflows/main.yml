```yaml
# This is a robust CI/CD workflow for a JavaScript application.
# It includes testing, security scanning, and deployment with comprehensive error handling.

name: JavaScript CI/CD

# §1. Trigger Configuration: Runs on pushes and PRs to the main branch.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Concurrency Control: Ensures only one workflow runs per branch/PR at a time.
# Newer commits will cancel in-progress runs for the same ref.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Permissions: Define default permissions for the GITHUB_TOKEN.
permissions:
  contents: read

jobs:
  # §6. Security Job: Performs static analysis to find vulnerabilities.
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # §2, §4, §8. Test Job: Runs tests across multiple Node.js versions.
  test:
    name: Test on Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # §7. Cache dependencies for faster builds with fallback keys.
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-node${{ matrix.node-version }}-

      # §3 & §10. Install dependencies with retry logic for network flakes.
      - name: Install Dependencies
        run: |
          ATTEMPTS=3
          RETRY_DELAY=15
          for i in $(seq 1 $ATTEMPTS); do
            npm ci && exit 0
            if [ $i -lt $ATTEMPTS ]; then
              echo "npm ci failed. Retrying in $RETRY_DELAY seconds..."
              sleep $RETRY_DELAY
            fi
          done
          echo "Failed to install dependencies after $ATTEMPTS attempts."
          exit 1

      # §6. Comprehensive security scanning for dependencies.
      - name: Run Dependency Vulnerability Scan
        run: npm audit --audit-level=high

      # §4 & §5. Run tests and build if the scripts exist in package.json.
      - name: Run Tests
        run: npm run --if-present test

      - name: Run Build
        run: npm run --if-present build

  # §9, §11, §12. Deployment Job: Deploys to production and reports status.
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://your-app-url.com # Replace with your actual deployment URL
    permissions:
      contents: write # Required for creating releases
      deployments: write # Required for creating deployment statuses

    steps:
      - name: Create GitHub Deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'production',
              required_contexts: [],
              auto_merge: false,
              description: 'Deploying to production'
            });
            core.setOutput('deployment_id', deployment.id);

      - name: Update Deployment Status (In Progress)
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.deployment_id }},
              state: 'in_progress',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js for Deployment
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Use a consistent Node version for deployment

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-node20-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-node20-

      - name: Install Production Dependencies
        run: npm ci --omit=dev

      # §10. This is a placeholder for the actual deployment logic.
      - name: Deploy to Server (Simulation)
        run: |
          echo "Deploying application..."
          # Replace this block with your actual deployment commands.
          # Example: rsync -avz --delete . user@your-server:/path/to/app
          # Example: aws s3 sync . s3://your-bucket
          sleep 20
          echo "Deployment simulation complete."

      - name: Update Deployment Status (Success)
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.deployment_id }},
              state: 'success',
              environment_url: 'https://your-app-url.com'
            });

      - name: Update Deployment Status (Failure)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.deployment_id }},
              state: 'failure',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

      # §12. Rollback Capabilities: Creating a release on successful deployment.
      # A rollback can be implemented with a separate 'workflow_dispatch' workflow
      # that re-runs this deployment job using a specific release tag.
      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: prod-v${{ github.run_number }}
          release_name: Production Release v${{ github.run_number }}
          body: |
            Successful deployment of commit `${{ github.sha }}` to production.
            Triggered by `${{ github.actor }}`.
          draft: false
          prerelease: false
```